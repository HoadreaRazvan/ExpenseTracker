@page "/incomes"
@using ExpenseTracker.Services
@inject IncomeService IncomeService
@using ExpenseTracker.Data.Models
@using System.Globalization

<NavMenu />
<h1>Incomes</h1>

<a class="btn btn-success mb-3" href="/incomes/add">Add Income</a>

<div class="row mb-3">
    <div class="col-md-3">
        <label>Start Date</label>
        <input type="date" class="form-control" @bind="startDate" />
    </div>
    <div class="col-md-3">
        <label>End Date</label>
        <input type="date" class="form-control" @bind="endDate" />
    </div>
    <div class="col-md-3 d-flex align-items-end">
        <button class="btn btn-primary" @onclick="ApplyFilter">Filter</button>
    </div>
</div>

@if (filteredIncomes == null)
{
    <p>Loading...</p>
}
else if (!filteredIncomes.Any())
{
    <p>No incomes found for selected interval.</p>
}
else
{
    <p><strong>Total Income: @filteredIncomes.Sum(i => i.Amount).ToString("C", CultureInfo.CurrentCulture)</strong></p>

    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Date</th>
                <th>Amount</th>
                <th>Type</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var income in filteredIncomes)
            {
                <tr>
                    <td>@income.Title</td>
                    <td>@income.Date.ToShortDateString()</td>
                    <td>@income.Amount.ToString("C", CultureInfo.CurrentCulture)</td>
                    <td>@income.Type.GetDescription()</td>
                    <td>
                        <a class="btn btn-primary btn-sm" href="/incomes/edit/@income.Id">Edit</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteIncome(income.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Income> allIncomes = new();
    private List<Income> filteredIncomes = new();

    private DateTime? startDate;
    private DateTime? endDate;

    protected override async Task OnInitializedAsync()
    {
        allIncomes = IncomeService.GetAllIncomes();
        filteredIncomes = allIncomes;
    }

    private void ApplyFilter()
    {
        filteredIncomes = allIncomes.Where(i =>
            (!startDate.HasValue || i.Date >= startDate.Value) &&
            (!endDate.HasValue || i.Date <= endDate.Value)
        ).ToList();
    }

    private async Task DeleteIncome(int id)
    {
        IncomeService.DeleteIncome(id);
        allIncomes = IncomeService.GetAllIncomes();
        ApplyFilter();
    }
}
