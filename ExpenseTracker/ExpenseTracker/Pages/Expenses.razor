@page "/expenses"
@using ExpenseTracker.Data.Models
@using ExpenseTracker.Services
@inject ExpenseService Service
@inject NavigationManager Navigation
@using System.Globalization

<NavMenu />

<style>
    .expenses-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
    }

    .page-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .page-title {
        font-size: 2.5rem;
        font-weight: 700;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 0.5rem;
    }

    .filter-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        margin-bottom: 2rem;
        flex-wrap: wrap;
    }

    .filter-select {
        padding: 0.75rem 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 12px;
        font-size: 1rem;
        background: #f8fafc;
    }

    .btn-add-expense {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
    }

        .btn-add-expense:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

    .expenses-table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

        .expenses-table th, .expenses-table td {
            padding: 1rem;
            border-bottom: 1px solid #e2e8f0;
            text-align: center;
        }

        .expenses-table th {
            background: #f1f5f9;
            font-weight: 600;
            color: #1e293b;
        }

    .btn-edit {
        background: linear-gradient(135deg, #facc15 0%, #eab308 100%);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

        .btn-edit:hover {
            transform: translateY(-1px);
            box-shadow: 0 5px 15px rgba(234, 179, 8, 0.3);
        }

    .btn-delete {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 0.9rem;
    }

        .btn-delete:hover {
            transform: translateY(-1px);
            box-shadow: 0 5px 15px rgba(239, 68, 68, 0.3);
        }

    .total-bar {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .empty-state {
        text-align: center;
        padding: 3rem;
        color: #64748b;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
    }

        .filter-group label {
            margin-bottom: 0.25rem;
            font-weight: 600;
        }
</style>

<div class="expenses-container">
    <div class="page-header">
        <h1 class="page-title">Expenses Management</h1>
        <p class="page-subtitle">Track and manage your expenses with ease</p>
    </div>

    <div class="filter-bar">
        <div class="filter-group">
            <label for="filterSelect">Filter by Status:</label>
            <select id="filterSelect" class="filter-select" @onchange="OnFilterChanged" value="@FilterOption">
                <option value="All">All</option>
                <option value="Planned">Planned</option>
                <option value="Unplanned">Unplanned</option>
            </select>
        </div>

        <div class="filter-group">
            <label for="categorySelect">Filter by Category:</label>
            <select id="categorySelect" class="filter-select" @onchange="OnCategoryChanged" value="@SelectedCategoryId">
                <option value="0">All Categories</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>

        <div class="filter-group">
            <label for="startDate">Start Date:</label>
            <input id="startDate" type="date" class="filter-select" @bind="FilterStartDate" />
        </div>

        <div class="filter-group">
            <label for="endDate">End Date:</label>
            <input id="endDate" type="date" class="filter-select" @bind="FilterEndDate" />
        </div>

        <div class="filter-group">
            <label for="sortSelect">Sort by Amount:</label>
            <select id="sortSelect" class="filter-select" @onchange="OnSortChanged" value="@SortOrder">
                <option value="None">None</option>
                <option value="Asc">Ascending</option>
                <option value="Desc">Descending</option>
            </select>
        </div>

        <button class="btn-add-expense" @onclick="GoToAddExpense" aria-label="Add New Expense">
            <svg class="icon" viewBox="0 0 24 24" width="20" height="20" fill="currentColor" aria-hidden="true">
                <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z" />
            </svg>
            Add New Expense
        </button>
    </div>

    @if (filteredExpenses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!filteredExpenses.Any())
    {
        <div class="empty-state">
            <h3>No Expenses Found</h3>
            <p>Try adjusting your filters or add a new expense.</p>
        </div>
    }
    else
    {
        <div class="total-bar">
            <span>Total Expenses: <strong>@filteredExpenses.Count</strong></span>
            <span>Total Amount: <strong>@filteredExpenses.Sum(e => e.Amount).ToString("C", CultureInfo.CurrentCulture)</strong></span>
        </div>

        <table class="expenses-table" aria-label="List of Expenses">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Planned</th>
                    <th>Category</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var expense in filteredExpenses)
                {
                    <tr>
                        <td>@expense.Title</td>
                        <td>@expense.Date.ToString("dd/MM/yyyy")</td>
                        <td>@expense.Amount.ToString("C", CultureInfo.CurrentCulture)</td>
                        <td>@(expense.Planned ? "Yes" : "No")</td>
                        <td>@expense.Category?.Name</td>
                        <td>
                            <button class="btn-edit" @onclick="() => EditExpense(expense.Id)">Edit</button>
                        </td>
                        <td>
                            <button class="btn-delete" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<Footer />

@code {
    private List<Expense> expenses = new();
    private List<Expense> filteredExpenses = new();
    private List<Category> Categories = new();

    private string FilterOption = "All";
    private int SelectedCategoryId = 0;
    private string SortOrder = "None";

    private DateTime? filterStartDate;
    private DateTime? FilterStartDate
    {
        get => filterStartDate;
        set
        {
            if (filterStartDate != value)
            {
                filterStartDate = value;
                ApplyFilter();
            }
        }
    }

    private DateTime? filterEndDate;
    private DateTime? FilterEndDate
    {
        get => filterEndDate;
        set
        {
            if (filterEndDate != value)
            {
                filterEndDate = value;
                ApplyFilter();
            }
        }
    }

    protected override void OnInitialized()
    {
        expenses = Service.GetAllExpenses();
        Categories = Service.GetAllCategories();
        ApplyFilter();
    }

    private void ApplyFilter()
    {
        IEnumerable<Expense> query = expenses;

        query = FilterOption switch
        {
            "Planned" => query.Where(e => e.Planned),
            "Unplanned" => query.Where(e => !e.Planned),
            _ => query
        };

        if (SelectedCategoryId != 0)
        {
            query = query.Where(e => e.CategoryId == SelectedCategoryId);
        }

        if (FilterStartDate.HasValue)
        {
            query = query.Where(e => e.Date.Date >= FilterStartDate.Value.Date);
        }

        if (FilterEndDate.HasValue)
        {
            query = query.Where(e => e.Date.Date <= FilterEndDate.Value.Date);
        }

        query = SortOrder switch
        {
            "Asc" => query.OrderBy(e => e.Amount),
            "Desc" => query.OrderByDescending(e => e.Amount),
            _ => query
        };

        filteredExpenses = query.ToList();
    }

    private void OnFilterChanged(ChangeEventArgs e)
    {
        FilterOption = e.Value?.ToString() ?? "All";
        ApplyFilter();
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int catId))
        {
            SelectedCategoryId = catId;
            ApplyFilter();
        }
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        SortOrder = e.Value?.ToString() ?? "None";
        ApplyFilter();
    }

    private void GoToAddExpense()
    {
        Navigation.NavigateTo("/expenses/new");
    }

    private void EditExpense(int id)
    {
        Navigation.NavigateTo($"/expenses/{id}");
    }

    private void DeleteExpense(int id)
    {
        Service.DeleteExpense(id);
        expenses = Service.GetAllExpenses();
        ApplyFilter();
    }
}